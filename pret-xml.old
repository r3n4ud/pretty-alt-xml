if not modules then modules = { } end modules ['pret-xml'] = {
   version   = 1.001,
   comment   = "from pret-.*\.lua, http://wiki.contextgarden.net/Verbatim_text#Your_own_formatter and http://wiki.contextgarden.net/Custom_pretty_printer",
   author    = "Renaud AUBIN",
   date      = "Time-stamp: <2010-11-08 00:11:32>"
   copyright = "ConTeXt Development Team",
   license   = "see context related readme files"
}

local utf = unicode.utf8
local utfcharacters, utfvalues = string.utfcharacters, string.utfvalues
local utfbyte, utffind = utf.byte, utf.findl
local byte, sub, find, gfind, match = string.byte, string.sub, string.find, string.gfind, string.match
local texwrite = tex.write

local state
local buffers = buffers
local context = context
local changestate, finishstate = buffers.changestate, buffers.finishstate
local visualizer = buffers.newvisualizer("xml")

incomment = false

local colors = {
   "prettyone",
   "prettytwo",
   "prettythree",
   "prettyfour",
   "prettyone",
   "prettytwo",
   "prettythree",
   "prettyfour",
   "prettyone",
   "prettytwo",
   "prettythree",
   "prettyfour",
   "prettyone",
   "prettytwo"
-- 0 0 0        -- Text
-- 0 100 0      -- Comment
-- 0 0 255      -- Doctype
-- 153 51 0     -- Quoted Value
-- 153 51 0     -- Single quoted Value
-- 150 150 0    -- Entity
-- 0 0 150      -- Tag
-- 245 132 76   -- Attribute name
-- 139 38 201   -- Processing Instruction
-- 255 128 64   -- Equal
-- 255 0 0      -- Invalid
-- 0 140 0      -- CDATA
-- 0 0 255      -- Embedded Doctype
-- 139 38 201   -- XML prolog
}



local states = {
   ["text"]=1,
   ["comment"]=2,
   ["doctype"]=3,
   ["quoted value"]=4,
   ["single quoted value"]=5,
   ["entity"]=6,
   ["tag"]=7,
   ["attribute name"]=8
   ["processing instruction"]=9,
   ["equal"]=10,
   ["invalid"]=11,
   ["cdata"]=12,
   ["embedded doctype"]=13,
   ["xml prolog"]=14,
}

function visualizer.reset()
    state = 0
end

local space = context.obs

local function flush_text(str)
   for c in utfcharacters(str) do
      if c == " " then space() else texwrite(c) end
   end
end

function visualizer.flush_line(str,nested)
   -- if (match(str,"^(<\?.*?\?>)$")) then
   --    state = changestate(states['xml prolog'],state)
   --    flush_text(str)
   --    state = finishstate(state)
   -- end
   -- state = finishstate(state)
   -- str = ""
   buffers.currentcolors = colors
   state = changestate(1,state)
   flush_text(str)
   state = finishstate(state)
end
